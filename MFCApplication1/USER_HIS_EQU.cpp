#include "pch.h"
#include "USER_HIS_EQU.h"

/*
********************************************************************************
********************************************************************************
*                               构造&析构函数
********************************************************************************
********************************************************************************
*/

/*
******************************************************************************
* 函数名称:	USER_HIS_EQU
* 函数功能: 构造（初始化）函数
* 输入参数:	ARRAY ：bmp图像的RGB三通道数据, ARRAYSIZE ：array的长度
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意:
*******************************************************************************
*/
 USER_HIS_EQU::USER_HIS_EQU(BYTE* ARRAY, int ARRAYSIZE)
{
	 array = ARRAY;
	 ArraySize = ARRAYSIZE;
	 
	 R_array = (BYTE*)new char[ArraySize / 3 + 1];
	 G_array = (BYTE*)new char[ArraySize / 3 + 1];
	 B_array = (BYTE*)new char[ArraySize / 3 + 1];
}
 /*
******************************************************************************
* 函数名称:	~USER_HIS_EQU
* 函数功能: 析构函数，将动态开辟的空间清除
* 输入参数:	none
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意:
*******************************************************************************
*/
 USER_HIS_EQU::~USER_HIS_EQU()
{
	 delete[] R_array;
	 delete[] G_array;
	 delete[] B_array;
}


/*
********************************************************************************
********************************************************************************
*                               接口函数
********************************************************************************
********************************************************************************
*/

/*
******************************************************************************
* 函数名称:	HistogramEqualization
* 函数功能: 直方图均衡化的接口函数
* 输入参数:	void
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意:
*******************************************************************************
*/

void USER_HIS_EQU::HistogramEqualization()
{
	//分离RGB
	SeparateRGB(array, ArraySize);
	//RGB分别直方图均衡化
	OneColorHistogramEqualization(R_array, ArraySize / 3);
	OneColorHistogramEqualization(G_array, ArraySize / 3);
	OneColorHistogramEqualization(B_array, ArraySize / 3);
	//更新图像数据
	UnionRGB(array, ArraySize);

}

/*
********************************************************************************
********************************************************************************
*                               功能函数
********************************************************************************
********************************************************************************
*/


/*
******************************************************************************
* 函数名称:	SeparateRGB
* 函数功能: 分离RGB分量
* 输入参数:	array ：bmp图像的RGB三通道数据,  ArraySize ：array的长度
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意:  
*******************************************************************************
*/


void USER_HIS_EQU :: SeparateRGB(BYTE* array, int ArraySize)
{
	int j = 0;
	for (int i = 0; i < ArraySize; i = i + 3)
	{
		R_array[j] = array[i + 2];
		G_array[j] = array[i + 1];
		B_array[j] = array[i + 0];

		j++;
	}
}

/*
******************************************************************************
* 函数名称:	OneColorHistogramEqualization
* 函数功能: 单通道直方图均衡化
* 输入参数:	array ：bmp图像的单通道数据,  ArraySize ：array的长度
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意: 
*******************************************************************************
*/

void USER_HIS_EQU::OneColorHistogramEqualization(BYTE* array, int ArraySize)
{
	float Grade[8] = {0}; //均衡化的分组计数数组

	//分级
	for (int i = 0; i < ArraySize; i++)
	{
		Classify(array[i], Grade);
	}
	//归一化
	Normalization(Grade,ArraySize);
	//新的分级
	CreatNewGrade(Grade);
	//更新灰度值
	UpdateArray(array, Grade, ArraySize);
	
}

/*
******************************************************************************
* 函数名称:	Classify
* 函数功能: 将0-255的图像分成8个等级
* 输入参数:	OneColorVal:0-255的 R/G/B值   * Grade:均衡化的分组计数数组
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意:
*******************************************************************************
*/
void USER_HIS_EQU :: Classify(int OneColorVal, float* Grade)
{
	for (int i = 0; i < 8; i++)
	{
		if ((OneColorVal >= 32 * i) && (OneColorVal < 32*i + 32))
		{
			Grade[i]++;
		}
	}
}
/*
******************************************************************************
* 函数名称:	Normalization
* 函数功能: 归一化
* 输入参数: 分级数组Grade
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意:
*******************************************************************************
*/
void USER_HIS_EQU :: Normalization(float* Grade,int ArraySize)
{
	for (int i = 0; i < 8; i++)
	{
		Grade[i] /= ArraySize;
	}
}

/*
******************************************************************************
* 函数名称:	CreatNewGrade
* 函数功能: 将Grade数组的内容变成灰度值
* 输入参数: 分级数组Grade
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意: 创建新的分级,i代表 分级数组的下标，j代表0-8的分级，经过两个循环，Grade的内容就变成了灰度值
			这个函数可能脑洞比较大
*******************************************************************************
*/
void USER_HIS_EQU::CreatNewGrade(float* Grade)
{
	float newGrade[8] = { 0 };
	//均衡化
	for (int i = 0; i < 8; i++)
	{
		newGrade[i] = Array_N_Sum(Grade,i) * 7;
	}
	//变换成灰度值
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			if (newGrade[i] >= j && newGrade[i] <= j + 1)
			{
				int tmp = round(newGrade[i]);
				Grade[i] = (32 * tmp + 32*(tmp + 1))/2;
				break;
			}
		}

	}
}
/*
******************************************************************************
* 函数名称:	UpdateArray
* 函数功能: 将图像数据根据均衡化的结果做更新
* 输入参数: 分级数组Grade
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意: 
*******************************************************************************
*/
void USER_HIS_EQU::UpdateArray(BYTE* array, float* Grade, int ArraySize)
{
	for (int i = 0; i < ArraySize; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			if ((array[i] >= 32 * j) && (array[i] < 32 * j + 32))
			{
				array[i] = (int)Grade[j];
				break;
			}
		}

	}
}

/*
******************************************************************************
* 函数名称:	UnionRGB
* 函数功能: RGB均衡化后的分量整合
* 输入参数: array : 图像数据   ArraySize：数据大小
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意:
*******************************************************************************
*/
void USER_HIS_EQU ::UnionRGB(BYTE* array, int ArraySize)
{
	int j = 0;
	for (int i = 0; i < ArraySize; i = i + 3)
	{
		array[i + 2] = R_array[j];
		array[i + 1] = G_array[j];
		array[i + 0] = B_array[j];

		j++;
	}
}
/*
******************************************************************************
* 函数名称:	Array_N_Sum
* 函数功能: 求数组前N项和
* 输入参数: 数组 , N
* 输出参数:	none
* 返 回 值:  void
* 创建日期:  2021年-10月-19日
* 注    意:
*******************************************************************************
*/
float USER_HIS_EQU::Array_N_Sum(float* array, int N)
{
	float res = 0;
	for (int i = 0; i <= N; i++)
	{
		res += array[i];
	}
	return res;
}